getwd()
setwd("D:/FIT3164_software/test")
library(dplyr)
library(tidyr)
library(skimr) # for summary statistics table
library(ggplot2)
library(corrplot)
library(rpart)
library(caret) # confusion matrix
library(tree) # for Decision Tree
library(e1071) # for Naive Bayes and Support Vector Machines
library(randomForest) # for Random Forest
library(adabag) # for Bagging and Boosting
library(neuralnet) # for ANN
library(ROCR) # for AUC and ROC
library(pROC)
source("my.prediction.stats.R")
source("wrappers.R")
# reading the csv file required and creating individual data by setting a seed (my Student ID)
rm(list = ls())
df <- read.csv("lymphedema_dataset.csv")
set.seed(123456)
# Split the data into training and testing sets (e.g., 70% training and 30% testing)
split_index <- sample(1:nrow(df), 0.8 * nrow(df))
train_data <- df[split_index, ]
test_data <- df[-split_index, ]
### Logistic Regression ###
# Fit the logistic regression model on the training data
lr.model <- glm(lymphedema ~ no.of.nodes.removed + age + sex + radiation.fraction + amount.of.radiation + breast.reconstruction + chemo + axi.radioteraphy, family = "binomial", data = train_data)
# Predict the binary response on the test data
predictions <- predict(lr.model, newdata = test_data, type = "response")
# Convert predictions to binary (0 or 1)
predictions <- ifelse(predictions > 0.5, 1, 0)
# Calculate accuracy
accuracy <- mean(predictions == test_data$lymphedema)
# Print the accuracy
cat("Accuracy:", accuracy, "\n")
# AUC
my.pred.stats(predict(lr.model, test_data, type="response"), test_data$lymphedema)
getwd()
source("my.prediction.stats.R")
source("wrappers.R")
my.pred.stats(predict(lr.model, test_data, type="response"), test_data$lymphedema)
{
classes = levels(target)
# Convert probabilities to best guesses at classes
pred = factor(prob > 1/2, c(F,T), classes)
cat("---------------------------------------------------------------------------\n")
cat("Performance statistics:\n")
cat("\n")
cat("Confusion matrix:\n\n")
T = table(pred,target)
print(T)
cat("\n")
cat("Classification accuracy =", mean(pred==target), "\n")
cat("Sensitivity             =", T[2,2]/(T[1,2]+T[2,2]), "\n")
cat("Specificity             =", T[1,1]/(T[1,1]+T[2,1]), "\n")
roc.obj = roc(response=as.vector(as.numeric(target))-1, as.vector(prob), quiet=TRUE)
cat("Area-under-curve        =", roc.obj$auc, "\n")
# Prob is probability of success, so if the target is not a success, flip the probability
# to get probability of failure
prob[target==classes[1]] = 1 - prob[target==classes[1]]
# Also make sure we never get exactly zero or one for probabilities due to numerical rounding
prob = (prob+1e-10)/(1+2e-10)
cat("Logarithmic loss        =", -sum(log(prob)), "\n")
cat("\n")
plot(roc.obj)
cat("---------------------------------------------------------------------------\n")
}
my.pred.stats <- function(prob, target)
{
classes = levels(target)
# Convert probabilities to best guesses at classes
pred = factor(prob > 1/2, c(F,T), classes)
cat("---------------------------------------------------------------------------\n")
cat("Performance statistics:\n")
cat("\n")
cat("Confusion matrix:\n\n")
T = table(pred,target)
print(T)
cat("\n")
cat("Classification accuracy =", mean(pred==target), "\n")
cat("Sensitivity             =", T[2,2]/(T[1,2]+T[2,2]), "\n")
cat("Specificity             =", T[1,1]/(T[1,1]+T[2,1]), "\n")
roc.obj = roc(response=as.vector(as.numeric(target))-1, as.vector(prob), quiet=TRUE)
cat("Area-under-curve        =", roc.obj$auc, "\n")
# Prob is probability of success, so if the target is not a success, flip the probability
# to get probability of failure
prob[target==classes[1]] = 1 - prob[target==classes[1]]
# Also make sure we never get exactly zero or one for probabilities due to numerical rounding
prob = (prob+1e-10)/(1+2e-10)
cat("Logarithmic loss        =", -sum(log(prob)), "\n")
cat("\n")
plot(roc.obj)
cat("---------------------------------------------------------------------------\n")
}
my.pred.stats(predict(lr.model, test_data, type="response"), test_data$lymphedema)
my.pred.stats(predictions, test_data$lymphedema)
my.pred.stats(predictions, test_data$lymphedema)
